<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kai Chen&#39;s Blog</title>
    <link>https://chenkai0930.github.io/</link>
    <description>Recent content on Kai Chen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jun 2020 10:40:23 -0400</lastBuildDate>
    
	<atom:link href="https://chenkai0930.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React (2)</title>
      <link>https://chenkai0930.github.io/post/react2/</link>
      <pubDate>Thu, 18 Jun 2020 10:40:23 -0400</pubDate>
      
      <guid>https://chenkai0930.github.io/post/react2/</guid>
      <description>Keys的作用 对字节点进行递归 在默认条件下，当递归遍历两个DOM节点的子元素，如果遇到不同的元素时，会对其进行更改。如果在子元素的末端添加新元素，变化的成本就比较低。React 文档 介绍了为什么要使用key。
在末端插入，react会从第一个开始匹配，发现两个元素一样。跳到下一个元素进行匹配。直到最后，插入第三个元素
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 在列表的头部插入，从第一个元素开始，发现不匹配，进行修改。但实际中，两个元素是 相同的，但位置发生了改变。
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Connecticut&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; key 解决了上面的问题 &amp;lt;ul&amp;gt; &amp;lt;li key=&amp;#34;2015&amp;#34;&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li key=&amp;#34;2016&amp;#34;&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li key=&amp;#34;2014&amp;#34;&amp;gt;Connecticut&amp;lt;/li&amp;gt; &amp;lt;li key=&amp;#34;2015&amp;#34;&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li key=&amp;#34;2016&amp;#34;&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 当子元素拥有key时，react使用key来匹配原有树上的子元素已经新的树上的子元素。让其变得高效.
设置key的方案很简单，如下所示 &amp;lt;li key={item.id}&amp;gt;{item.name}&amp;lt;/li&amp;gt; JSX的语法 在JSX语法中，class 要用 className来代替。 label for 标签需要要 label htmlFor来代替。
创建第一个组件 import React from &amp;#39;react&amp;#39; import ReactDOM from &amp;#39;react-dom&amp;#39; function Hello(){ return &amp;lt;div&amp;gt;Hello World&amp;lt;/div&amp;gt; //返回一个虚拟DOM } ReactDOM.</description>
    </item>
    
    <item>
      <title>React入门（1）- 介绍，安装</title>
      <link>https://chenkai0930.github.io/post/react1/</link>
      <pubDate>Tue, 16 Jun 2020 16:15:46 -0400</pubDate>
      
      <guid>https://chenkai0930.github.io/post/react1/</guid>
      <description>介绍 React 模块化：把可复用的一些代码，抽离成一个个模块，便于项目的开发和维护。
组件化：把一些可复用的UI元素，抽离为组件。
在移动app开发方面，react结合react-native，可以无缝迁移到移动app的开发。
几个核心概念 虚拟Dom（Virtual Document Object Model）   DOM的本质： 浏览器中，用js对象来表示页面上的元素，提供了操作DOM的API。
  react中的虚拟DOM：在框架中，用JS对象来模拟页面上的DOM和DOM嵌套。
  为什么？ 为了实现页面中，高效更新。按需更新。
 获取新旧两个DOM树，然后对DOM树中的元素一一对比。元素改变时，更新。这样的操作减少了渲染的个数。  假如要用js模拟以下的代码
&amp;lt;div id=&amp;quot;mydiv&amp;quot; title=&amp;quot;mytitle&amp;quot;&amp;gt;myContent&amp;lt;/div&amp;gt;
var div = { tagName: &amp;#39;div&amp;#39;, attrs: { id: &amp;#39;mydiv&amp;#39;, title: &amp;#39;mytitle&amp;#39; }, childrens: [ &amp;#39;mycontent&amp;#39; ] }   Diff算法  Tree diff: 新旧两个DOM树，逐层对比。 component diff: 在进行Tree Diff时，每一层中，组件的对比。如果对比，前后两个组件类型相同，则暂时认为此组件不需要被更新。 如果不同，移除旧的组件，创新新的组件并加到页面上。 element diff: 在组件对比的时候，如果组件类型相同，则需要对比其元素的对比。  Webpack   在项目跟目录中创建dist 和src 文件夹。src 目录下创建 index.html</description>
    </item>
    
    <item>
      <title>浅克隆和深克隆</title>
      <link>https://chenkai0930.github.io/post/clone/</link>
      <pubDate>Tue, 16 Jun 2020 15:52:47 -0400</pubDate>
      
      <guid>https://chenkai0930.github.io/post/clone/</guid>
      <description>浅克隆和深克隆 总结了几种深克隆和浅克隆的方法。
概念 浅克隆： 基本类型为值传递，但对象为引用传递。
深克隆： 所有元素或属性均完全克隆，并跟原来的引用完全独立，互不影响。
let obj ={ a:100, b: [10,20,30], c: { x: 10 }, d: /^d+$/ }; //浅克隆，对obj2.c.x 进行修改，obj中的数也会收到影响 let obj2 = {}; for (let key in obj) { if (!obj.hasOwnProperty(key)) break; obj2[key]=obj[key]; } //浅克隆的另一种方法 let obj2 = { ...obj } //深克隆 let obj2=JSON.parse(JSON.stringify(obj)); //但是stringify处理正则，函数，日期会出问题  //deepClone recursion function deepClone(obj){ //coner case  if(obj === null) return null; if(typeof obj !==&amp;#34;object&amp;#34;) return obj; if(obj instanceof RegExp) { return new RegExp(obj); } if(obj instanceof Date) { return new Date(obj); } let newObj = new obj.</description>
    </item>
    
    <item>
      <title>什么是Redis与简单实现</title>
      <link>https://chenkai0930.github.io/post/blog2/</link>
      <pubDate>Sat, 13 Jun 2020 22:32:30 -0400</pubDate>
      
      <guid>https://chenkai0930.github.io/post/blog2/</guid>
      <description>Redis Redis 是一种 高效查询的in-memory 数据储存。读取和储存操作很快。可以储存的数据类型包括：
 String Sets Lists Sorted sets Hashes Bit arrays  Redis 把整个数据集保存在内存当中，以一种高效的结构存在。但作为代价，它不能使用querying。比如找出所有大于18岁的用户等等。
优点  查找和操作就是快  不需要每个操作都跟disk同步   在高速缓存中比 Memcache 更有优势  Redis 可以通过 Memcache 的 failings 学习 可以存储多种类型 允许在更复杂的场景中运用   惊人的性能  缺点  因为不是实时同步，所以一些data可能丢失 不可以querying 当数据特别大的时候，对RAM的消耗会特别高  运用场景  Session Storage Full-page caching Real time statistics Recent posts Scoreboards Pub/Sub (Publish/Subscribe)  安装Redis Redis Syntax 上面有redis的一系列指令和介绍。
MAC OS 安装 直接打开terminal用brew快捷安装并运行
 brew install redis redis server  检查redis是否运行： 重新打开一个terminal窗口，输入redis-cli 当给出 PING redis会返回值 PONG</description>
    </item>
    
    <item>
      <title>如何用hugo和GitHub来搭建个人博客</title>
      <link>https://chenkai0930.github.io/post/blog/</link>
      <pubDate>Sat, 13 Jun 2020 21:26:00 -0400</pubDate>
      
      <guid>https://chenkai0930.github.io/post/blog/</guid>
      <description>Step 1. 安装hugo Hugo 版本 找到对应的系统和你需要的版本下载
Hugo官网上也有一些安装的教程Install Hugo
我自己是用brew工具直接安装的，打开terminal 输入
brew install hugo  Step 2. 创建第一个博客项目 等hugo安装成功后，在terminal中定位到你准备安置项目的根目录，直接使用创建一个新的site
hugo new site myBlog  在目标根目录会创建一个myBlog文件夹
Step 3. 设置hugo主题 Hugo的官网有很多的主题模版，里面不只有blog的模版。可选择的种类特别多 比如我目前使用的这个主题 m10c就是从这个网站上下载下来的。 可以直接用git拷贝到你的目录中
git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  Step 4. 启动个人博客 切换到博客的根目录，在terminal中输入 指令
hugo server -t m10c --buildDrafts  然后在终端里会显示本地服务器的地址，复制下来，打开浏览器复制链接进去，就可以看到你的博客啦。
Step 5. 写第一篇博客 切回项目的根目录，输入指令
hugo new post/blog.md  然后hugo会在 content/post 中自动生成markdown文件，直接用编译器打开，在md文件的下下面写的文章内容就好了。很简单。 hugo 的 Fast Render Mode 可以在你写的同时，就对网站进行了更新。不需要rebuild
Step 6. 配置远程服务器 我这里直接用了github的远程服务器。这个其实很随意，我选择github是因为完全免费，而且也可以熟悉一些git操作练习。
进入[github]网站，创建新的repository。 注意这里repository name一定要写你的github昵称加上.</description>
    </item>
    
  </channel>
</rss>